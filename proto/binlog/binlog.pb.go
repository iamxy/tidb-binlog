// Code generated by protoc-gen-gogo.
// source: binlog.proto
// DO NOT EDIT!

/*
	Package pb_binlog is a generated protocol buffer package.

	It is generated from these files:
		binlog.proto

	It has these top-level messages:
		Event
		DMLData
		Binlog
*/
package pb_binlog

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_Insert EventType = 0
	EventType_Update EventType = 1
	EventType_Delete EventType = 2
)

var EventType_name = map[int32]string{
	0: "Insert",
	1: "Update",
	2: "Delete",
}
var EventType_value = map[string]int32{
	"Insert": 0,
	"Update": 1,
	"Delete": 2,
}

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}
func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (x *EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventType_value, data, "EventType")
	if err != nil {
		return err
	}
	*x = EventType(value)
	return nil
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBinlog, []int{0} }

type BinlogType int32

const (
	BinlogType_DML BinlogType = 0
	BinlogType_DDL BinlogType = 1
)

var BinlogType_name = map[int32]string{
	0: "DML",
	1: "DDL",
}
var BinlogType_value = map[string]int32{
	"DML": 0,
	"DDL": 1,
}

func (x BinlogType) Enum() *BinlogType {
	p := new(BinlogType)
	*p = x
	return p
}
func (x BinlogType) String() string {
	return proto.EnumName(BinlogType_name, int32(x))
}
func (x *BinlogType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BinlogType_value, data, "BinlogType")
	if err != nil {
		return err
	}
	*x = BinlogType(value)
	return nil
}
func (BinlogType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBinlog, []int{1} }

// TableMutation contains mutations in a table.
type Event struct {
	SchemaName *string   `protobuf:"bytes,1,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	TableName  *string   `protobuf:"bytes,2,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Tp         EventType `protobuf:"varint,3,opt,name=tp,enum=pb_binlog.EventType" json:"tp"`
	// For inserted rows, we save all column values of the row[column_name, column_type, column_value, ...].
	// For updated  rows, we save all old and new column values of the row[column_name, column_type, column_old_value, column_new_value, ...].
	// For Deleted  rowm, we save all column values of the row[column_name, column_type, column_value, ...].
	Row              []byte `protobuf:"bytes,4,opt,name=row" json:"row,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorBinlog, []int{0} }

func (m *Event) GetSchemaName() string {
	if m != nil && m.SchemaName != nil {
		return *m.SchemaName
	}
	return ""
}

func (m *Event) GetTableName() string {
	if m != nil && m.TableName != nil {
		return *m.TableName
	}
	return ""
}

func (m *Event) GetTp() EventType {
	if m != nil {
		return m.Tp
	}
	return EventType_Insert
}

func (m *Event) GetRow() []byte {
	if m != nil {
		return m.Row
	}
	return nil
}

type DMLData struct {
	// mutations contains all the row changes.
	Events           []Event `protobuf:"bytes,2,rep,name=events" json:"events"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DMLData) Reset()                    { *m = DMLData{} }
func (m *DMLData) String() string            { return proto.CompactTextString(m) }
func (*DMLData) ProtoMessage()               {}
func (*DMLData) Descriptor() ([]byte, []int) { return fileDescriptorBinlog, []int{1} }

func (m *DMLData) GetEvents() []Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// Binlog contains all the changes in a transaction.
type Binlog struct {
	Tp       BinlogType `protobuf:"varint,1,opt,name=tp,enum=pb_binlog.BinlogType" json:"tp"`
	CommitTs int64      `protobuf:"varint,3,opt,name=commit_ts,json=commitTs" json:"commit_ts"`
	// dml_data is marshalled from DML type,
	DmlData *DMLData `protobuf:"bytes,5,opt,name=dml_data,json=dmlData" json:"dml_data,omitempty"`
	// ddl_query is the original ddl statement query.
	DdlQuery         []byte `protobuf:"bytes,6,opt,name=ddl_query,json=ddlQuery" json:"ddl_query,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Binlog) Reset()                    { *m = Binlog{} }
func (m *Binlog) String() string            { return proto.CompactTextString(m) }
func (*Binlog) ProtoMessage()               {}
func (*Binlog) Descriptor() ([]byte, []int) { return fileDescriptorBinlog, []int{2} }

func (m *Binlog) GetTp() BinlogType {
	if m != nil {
		return m.Tp
	}
	return BinlogType_DML
}

func (m *Binlog) GetCommitTs() int64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *Binlog) GetDmlData() *DMLData {
	if m != nil {
		return m.DmlData
	}
	return nil
}

func (m *Binlog) GetDdlQuery() []byte {
	if m != nil {
		return m.DdlQuery
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "pb_binlog.Event")
	proto.RegisterType((*DMLData)(nil), "pb_binlog.DMLData")
	proto.RegisterType((*Binlog)(nil), "pb_binlog.Binlog")
	proto.RegisterEnum("pb_binlog.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("pb_binlog.BinlogType", BinlogType_name, BinlogType_value)
}
func (m *Event) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Event) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SchemaName != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBinlog(data, i, uint64(len(*m.SchemaName)))
		i += copy(data[i:], *m.SchemaName)
	}
	if m.TableName != nil {
		data[i] = 0x12
		i++
		i = encodeVarintBinlog(data, i, uint64(len(*m.TableName)))
		i += copy(data[i:], *m.TableName)
	}
	data[i] = 0x18
	i++
	i = encodeVarintBinlog(data, i, uint64(m.Tp))
	if m.Row != nil {
		data[i] = 0x22
		i++
		i = encodeVarintBinlog(data, i, uint64(len(m.Row)))
		i += copy(data[i:], m.Row)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DMLData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DMLData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			data[i] = 0x12
			i++
			i = encodeVarintBinlog(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Binlog) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Binlog) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintBinlog(data, i, uint64(m.Tp))
	data[i] = 0x18
	i++
	i = encodeVarintBinlog(data, i, uint64(m.CommitTs))
	if m.DmlData != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintBinlog(data, i, uint64(m.DmlData.Size()))
		n1, err := m.DmlData.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DdlQuery != nil {
		data[i] = 0x32
		i++
		i = encodeVarintBinlog(data, i, uint64(len(m.DdlQuery)))
		i += copy(data[i:], m.DdlQuery)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Binlog(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Binlog(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBinlog(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.SchemaName != nil {
		l = len(*m.SchemaName)
		n += 1 + l + sovBinlog(uint64(l))
	}
	if m.TableName != nil {
		l = len(*m.TableName)
		n += 1 + l + sovBinlog(uint64(l))
	}
	n += 1 + sovBinlog(uint64(m.Tp))
	if m.Row != nil {
		l = len(m.Row)
		n += 1 + l + sovBinlog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DMLData) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovBinlog(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Binlog) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBinlog(uint64(m.Tp))
	n += 1 + sovBinlog(uint64(m.CommitTs))
	if m.DmlData != nil {
		l = m.DmlData.Size()
		n += 1 + l + sovBinlog(uint64(l))
	}
	if m.DdlQuery != nil {
		l = len(m.DdlQuery)
		n += 1 + l + sovBinlog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBinlog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBinlog(x uint64) (n int) {
	return sovBinlog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SchemaName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.TableName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Tp |= (EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Row = append(m.Row[:0], data[iNdEx:postIndex]...)
			if m.Row == nil {
				m.Row = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinlog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinlog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DMLData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DMLData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DMLData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinlog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinlog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Binlog) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Binlog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Binlog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Tp |= (BinlogType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CommitTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DmlData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DmlData == nil {
				m.DmlData = &DMLData{}
			}
			if err := m.DmlData.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdlQuery", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdlQuery = append(m.DdlQuery[:0], data[iNdEx:postIndex]...)
			if m.DdlQuery == nil {
				m.DdlQuery = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinlog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinlog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBinlog(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBinlog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBinlog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBinlog(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBinlog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBinlog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("binlog.proto", fileDescriptorBinlog) }

var fileDescriptorBinlog = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x18, 0x85, 0x9b, 0x76, 0xeb, 0xd6, 0x7f, 0x43, 0x42, 0x98, 0x50, 0x14, 0xbb, 0xba, 0xab, 0x32,
	0xb1, 0x83, 0xdd, 0x79, 0x3b, 0xea, 0x85, 0xb0, 0x09, 0x96, 0x79, 0x5d, 0xb2, 0x25, 0xcc, 0x41,
	0xdb, 0xd4, 0x36, 0x2a, 0x7b, 0x00, 0xdf, 0xc1, 0x07, 0xf0, 0x61, 0x76, 0xe9, 0x13, 0x88, 0xcc,
	0x17, 0x91, 0xa6, 0x65, 0x8e, 0xdd, 0x9d, 0x9c, 0xf3, 0xff, 0x27, 0x5f, 0x02, 0xdd, 0xc5, 0x3a,
	0x8d, 0xc5, 0xca, 0xcf, 0x72, 0x21, 0x05, 0xb1, 0xb2, 0x45, 0x54, 0x19, 0x67, 0xbd, 0x95, 0x58,
	0x09, 0xe5, 0x8e, 0x4a, 0x55, 0x0d, 0x0c, 0xde, 0x11, 0x34, 0x6f, 0x5f, 0x79, 0x2a, 0x49, 0x1f,
	0x3a, 0xc5, 0xf2, 0x89, 0x27, 0x34, 0x4a, 0x69, 0xc2, 0x6d, 0xe4, 0x22, 0xcf, 0x0a, 0xa1, 0xb2,
	0xee, 0x69, 0xc2, 0xc9, 0x05, 0x80, 0xa4, 0x8b, 0x98, 0x57, 0xb9, 0xae, 0x72, 0x4b, 0x39, 0x2a,
	0x1e, 0x82, 0x2e, 0x33, 0xdb, 0x70, 0x91, 0x77, 0x32, 0xee, 0xf9, 0xfb, 0x7b, 0x7d, 0xd5, 0x3e,
	0xdf, 0x64, 0x7c, 0xd2, 0xd8, 0x7e, 0xf7, 0xb5, 0x50, 0x97, 0x19, 0xc1, 0x60, 0xe4, 0xe2, 0xcd,
	0x6e, 0xb8, 0xc8, 0xeb, 0x86, 0xa5, 0x1c, 0xdc, 0x40, 0x2b, 0x98, 0x4d, 0x03, 0x2a, 0x29, 0xf1,
	0xc1, 0xe4, 0xe5, 0x4e, 0x61, 0xeb, 0xae, 0xe1, 0x75, 0xc6, 0xf8, 0xb8, 0xac, 0x2e, 0xaa, 0xa7,
	0x06, 0x9f, 0x08, 0xcc, 0x89, 0x8a, 0xc9, 0x95, 0x62, 0x40, 0x8a, 0xe1, 0xf4, 0x60, 0xad, 0x8a,
	0x8f, 0x20, 0x2e, 0xc1, 0x5a, 0x8a, 0x24, 0x59, 0xcb, 0x48, 0x16, 0x8a, 0xdb, 0xa8, 0xc3, 0x76,
	0x65, 0xcf, 0x0b, 0x72, 0x0d, 0x6d, 0x96, 0xc4, 0x11, 0xa3, 0x92, 0xda, 0x4d, 0x17, 0x79, 0x9d,
	0x31, 0x39, 0x68, 0xad, 0x81, 0xc3, 0x16, 0x4b, 0x62, 0x45, 0x7e, 0x0e, 0x16, 0x63, 0x71, 0xf4,
	0xfc, 0xc2, 0xf3, 0x8d, 0x6d, 0xaa, 0xc7, 0xb5, 0x19, 0x8b, 0x1f, 0xca, 0xf3, 0x70, 0x04, 0xd6,
	0xfe, 0x2b, 0x08, 0x80, 0x79, 0x97, 0x16, 0x3c, 0x97, 0x58, 0x2b, 0xf5, 0x63, 0xc6, 0xa8, 0xe4,
	0x18, 0x95, 0x3a, 0xe0, 0x31, 0x97, 0x1c, 0xeb, 0x43, 0x07, 0xe0, 0x9f, 0x9b, 0xb4, 0xc0, 0x08,
	0x66, 0x53, 0xac, 0x29, 0x11, 0x4c, 0x31, 0x9a, 0xe0, 0xed, 0xce, 0x41, 0x5f, 0x3b, 0x07, 0xfd,
	0xec, 0x1c, 0xf4, 0xf1, 0xeb, 0x68, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x36, 0xe7, 0x6b,
	0xfc, 0x01, 0x00, 0x00,
}
