// Code generated by protoc-gen-gogo.
// source: proto/binlog.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		proto/binlog.proto

	It has these top-level messages:
		DumpBinlogReq
		DumpBinlogResp
*/
package proto

import (
	"fmt"

	proto1 "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type DumpBinlogReq struct {
	// beginCommitTS speicifies the position from which begin to dump binlogs.
	// notice that actually the result of dump starts from the one next to beginCommitTS
	// it should be zero in case of the first request.
	BeginCommitTS int64 `protobuf:"varint,1,opt,name=beginCommitTS,proto3" json:"beginCommitTS,omitempty"`
	// limit defines the maximum number of binlogs requested once call.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *DumpBinlogReq) Reset()                    { *m = DumpBinlogReq{} }
func (m *DumpBinlogReq) String() string            { return proto1.CompactTextString(m) }
func (*DumpBinlogReq) ProtoMessage()               {}
func (*DumpBinlogReq) Descriptor() ([]byte, []int) { return fileDescriptorBinlog, []int{0} }

type DumpBinlogResp struct {
	// An empty errmsg means that the successful acquisition of binlogs.
	Errmsg string `protobuf:"bytes,1,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	// payloads is an array of binlog bytecodes returned.
	Payloads [][]byte `protobuf:"bytes,2,rep,name=payloads" json:"payloads,omitempty"`
	// endCommitTS is the commitTS of the last one in binlog payloads
	// client can use it as beginCommitTS of the next request of dump.
	EndCommitTS int64 `protobuf:"varint,3,opt,name=endCommitTS,proto3" json:"endCommitTS,omitempty"`
}

func (m *DumpBinlogResp) Reset()                    { *m = DumpBinlogResp{} }
func (m *DumpBinlogResp) String() string            { return proto1.CompactTextString(m) }
func (*DumpBinlogResp) ProtoMessage()               {}
func (*DumpBinlogResp) Descriptor() ([]byte, []int) { return fileDescriptorBinlog, []int{1} }

func init() {
	proto1.RegisterType((*DumpBinlogReq)(nil), "proto.DumpBinlogReq")
	proto1.RegisterType((*DumpBinlogResp)(nil), "proto.DumpBinlogResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Binlog service

type BinlogClient interface {
	// DumpBinlog dumps a continuous binlogs from a given position in binlog-server.
	DumpBinlog(ctx context.Context, in *DumpBinlogReq, opts ...grpc.CallOption) (*DumpBinlogResp, error)
}

type binlogClient struct {
	cc *grpc.ClientConn
}

func NewBinlogClient(cc *grpc.ClientConn) BinlogClient {
	return &binlogClient{cc}
}

func (c *binlogClient) DumpBinlog(ctx context.Context, in *DumpBinlogReq, opts ...grpc.CallOption) (*DumpBinlogResp, error) {
	out := new(DumpBinlogResp)
	err := grpc.Invoke(ctx, "/proto.Binlog/DumpBinlog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Binlog service

type BinlogServer interface {
	// DumpBinlog dumps a continuous binlogs from a given position in binlog-server.
	DumpBinlog(context.Context, *DumpBinlogReq) (*DumpBinlogResp, error)
}

func RegisterBinlogServer(s *grpc.Server, srv BinlogServer) {
	s.RegisterService(&_Binlog_serviceDesc, srv)
}

func _Binlog_DumpBinlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpBinlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinlogServer).DumpBinlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Binlog/DumpBinlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinlogServer).DumpBinlog(ctx, req.(*DumpBinlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Binlog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Binlog",
	HandlerType: (*BinlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DumpBinlog",
			Handler:    _Binlog_DumpBinlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorBinlog,
}

func (m *DumpBinlogReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DumpBinlogReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeginCommitTS != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintBinlog(data, i, uint64(m.BeginCommitTS))
	}
	if m.Limit != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintBinlog(data, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *DumpBinlogResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DumpBinlogResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Errmsg) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBinlog(data, i, uint64(len(m.Errmsg)))
		i += copy(data[i:], m.Errmsg)
	}
	if len(m.Payloads) > 0 {
		for _, b := range m.Payloads {
			data[i] = 0x12
			i++
			i = encodeVarintBinlog(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if m.EndCommitTS != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintBinlog(data, i, uint64(m.EndCommitTS))
	}
	return i, nil
}

func encodeFixed64Binlog(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Binlog(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBinlog(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DumpBinlogReq) Size() (n int) {
	var l int
	_ = l
	if m.BeginCommitTS != 0 {
		n += 1 + sovBinlog(uint64(m.BeginCommitTS))
	}
	if m.Limit != 0 {
		n += 1 + sovBinlog(uint64(m.Limit))
	}
	return n
}

func (m *DumpBinlogResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovBinlog(uint64(l))
	}
	if len(m.Payloads) > 0 {
		for _, b := range m.Payloads {
			l = len(b)
			n += 1 + l + sovBinlog(uint64(l))
		}
	}
	if m.EndCommitTS != 0 {
		n += 1 + sovBinlog(uint64(m.EndCommitTS))
	}
	return n
}

func sovBinlog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBinlog(x uint64) (n int) {
	return sovBinlog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DumpBinlogReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DumpBinlogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DumpBinlogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginCommitTS", wireType)
			}
			m.BeginCommitTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.BeginCommitTS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBinlog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinlog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DumpBinlogResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DumpBinlogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DumpBinlogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBinlog
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, make([]byte, postIndex-iNdEx))
			copy(m.Payloads[len(m.Payloads)-1], data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndCommitTS", wireType)
			}
			m.EndCommitTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EndCommitTS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBinlog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinlog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBinlog(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBinlog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinlog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBinlog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBinlog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBinlog(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBinlog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBinlog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("proto/binlog.proto", fileDescriptorBinlog) }

var fileDescriptorBinlog = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xca, 0xcc, 0xcb, 0xc9, 0x4f, 0xd7, 0x03, 0x73, 0x84, 0x58, 0xc1, 0x94, 0x94,
	0x48, 0x7a, 0x7e, 0x7a, 0x3e, 0x44, 0x1a, 0xc4, 0x82, 0x48, 0x2a, 0x79, 0x73, 0xf1, 0xba, 0x94,
	0xe6, 0x16, 0x38, 0x81, 0x35, 0x04, 0xa5, 0x16, 0x0a, 0xa9, 0x70, 0xf1, 0x26, 0xa5, 0xa6, 0x67,
	0xe6, 0x39, 0xe7, 0xe7, 0xe6, 0x66, 0x96, 0x84, 0x04, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07,
	0xa1, 0x0a, 0x0a, 0x89, 0x70, 0xb1, 0xe6, 0x64, 0x02, 0x99, 0x12, 0x4c, 0x40, 0x59, 0xd6, 0x20,
	0x08, 0x47, 0x29, 0x8d, 0x8b, 0x0f, 0xd9, 0xb0, 0xe2, 0x02, 0x21, 0x31, 0x2e, 0xb6, 0xd4, 0xa2,
	0xa2, 0xdc, 0xe2, 0x74, 0xb0, 0x31, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x14, 0x17, 0x47, 0x41, 0x62,
	0x65, 0x4e, 0x7e, 0x62, 0x4a, 0x31, 0xd0, 0x08, 0x66, 0x0d, 0x9e, 0x20, 0x38, 0x5f, 0x48, 0x81,
	0x8b, 0x3b, 0x35, 0x2f, 0x05, 0x6e, 0x3f, 0x33, 0xd8, 0x7e, 0x64, 0x21, 0x23, 0x57, 0x2e, 0x36,
	0x88, 0x1d, 0x42, 0xd6, 0x5c, 0x5c, 0x08, 0x1b, 0x85, 0x44, 0x20, 0x9e, 0xd2, 0x43, 0xf1, 0x91,
	0x94, 0x28, 0x16, 0xd1, 0xe2, 0x02, 0x25, 0x06, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x00,
	0xf1, 0x03, 0x20, 0x9e, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xac, 0xd2, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x4c, 0xf2, 0x44, 0x7d, 0x47, 0x01, 0x00, 0x00,
}
